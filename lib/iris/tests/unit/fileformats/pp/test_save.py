# (C) British Crown Copyright 2014, Met Office
#
# This file is part of Iris.
#
# Iris is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Iris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Iris.  If not, see <http://www.gnu.org/licenses/>.
"""Unit tests for the `iris.fileformats.pp.save` function."""

# Import iris.tests first so that some things can be initialised before
# importing anything else.
import iris.tests as tests

import mock

import iris.fileformats.pp as pp
import iris.fileformats.rules as rules
import iris.tests.stock as stock


class Test_using_stash2lbfc(tests.IrisTest):
    # Tests involving the call to a translation table between stash and field
    # code using data taken from the stash master, generated by the
    # iris-code-generators.
    def setUp(self):
        log_patch = mock.patch('iris.fileformats.rules.log')
        log_patch.start()
        self.addCleanup(log_patch.stop)

        field_save_patch = mock.patch('iris.fileformats.pp.PPField.save',
                                      return_value=self)
        field_save_patch.start()
        self.addCleanup(field_save_patch.stop)

        self.cube = tests.stock.lat_lon_cube()

    def test_nolbfc(self):
        # Check that the save function doesn't return an lbfc where no match is
        # concerned.
        target = mock.Mock(name='target')
        target.mode = ('b')
        pp.save(self.cube, target)
        rule = ("pp.lbfc = iris.fileformats._ff_cross_references.STASH_TRANS["
                "str(cm.attributes['STASH'])].field_code])")
        self.assertNotIn(rule, str(rules.log.call_args_list[-1]))

    def test_stash_to_lbfc(self):
        # Check that the save function returns an lbfc where a stash attribute
        # exists.
        target = mock.Mock(name='target')
        target.mode = ('b')
        self.cube.attributes['STASH'] = pp.STASH.from_msi('m04s07i002')
        pp.save(self.cube, target)
        rule = ("pp.lbfc = iris.fileformats._ff_cross_references.STASH_TRANS["
                "str(cm.attributes['STASH'])].field_code])")
        self.assertIn(rule, str(rules.log.call_args_list[-1]))


if __name__ == "__main__":
    tests.main()
