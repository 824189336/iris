# (C) British Crown Copyright 2010 - 2012, Met Office
#
# This file is part of Iris.
#
# Iris is free software: you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Iris is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Iris.  If not, see <http://www.gnu.org/licenses/>.
"""
Provides capability to override any calls to the matplotlib function show
to allow the ability to perform testing of plots generated by example
documentation code located with the directory example_code/graphics.

"""

import unittest

import matplotlib.pyplot as plt

import iris.plot as iplt


# Save the original matplotlib show function.
_mpl_show_func = plt.show

# Instance of the unittest testcase.
_testcase = None


def init(testcase):
    """Initialise the state for performing override of show method."""

    # Reference these global namespace variables.
    global _testcase
    
    if not isinstance(testcase, unittest.TestCase):
        raise ValueError('Require a unittest TestCase instance.')
            
    _testcase = testcase

    # Override plt.show and iplt.show with the wrapper function.
    plt.show = iplt.show = _override_mpl_show


def _override_mpl_show(*args, **kwargs):
    """Wrapper function used to intercept calls to matplotlib show function"""

    # Reinstate original matplotlib show function before check_graphic call.
    plt.show = iplt.show = _mpl_show_func    

    # Validate the current matplotlib figure.
    _testcase.check_graphic()
    
    # Reinstate wrapper function.
    plt.show = iplt.show = _override_mpl_show

